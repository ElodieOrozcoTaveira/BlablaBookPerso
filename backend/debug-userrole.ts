import sequelize from './src/config/database.js';
import Role from './src/models/Role.js';
import User from './src/models/User.js';
import UserRole from './src/models/UserRole.js';

async function testUserRoleCreation() {
    try {
        console.log('üîç Connexion √† la base...');
        await sequelize.authenticate();
        
        console.log('üîç Recherche du r√¥le "user"...');
        const userRole = await Role.findOne({ where: { name: 'user' } });
        
        if (!userRole) {
            console.log('‚ùå R√¥le "user" non trouv√© !');
            return;
        }

        console.log('‚úÖ R√¥le trouv√©:', {
            id_role: userRole.id_role,
            name: userRole.name,
            description: userRole.description
        });

        console.log('üîç Acc√®s aux propri√©t√©s du r√¥le:');
        console.log('  - userRole.id_role =', userRole.id_role);
        console.log('  - userRole.get("id_role") =', userRole.get('id_role'));
        console.log('  - userRole.dataValues.id_role =', userRole.dataValues?.id_role);

        // Cherchons un utilisateur existant pour le test
        console.log('\nüîç Recherche d\'un utilisateur...');
        const user = await User.findOne();
        
        if (!user) {
            console.log('‚ùå Aucun utilisateur trouv√© !');
            return;
        }

        console.log('‚úÖ Utilisateur trouv√©:', {
            id_user: user.id_user,
            username: user.username
        });

        // V√©rifions si une relation UserRole existe d√©j√†
        console.log('\nüîç V√©rification relation UserRole existante...');
        const existingUserRole = await UserRole.findOne({
            where: {
                id_user: user.id_user,
                id_role: userRole.get('id_role')
            }
        });

        if (existingUserRole) {
            console.log('‚úÖ Relation UserRole existante trouv√©e:', {
                id_user_role: existingUserRole.id_user_role,
                id_user: existingUserRole.id_user,
                id_role: existingUserRole.id_role
            });
        } else {
            console.log('‚ÑπÔ∏è Aucune relation UserRole existante');

            // Test de cr√©ation UserRole
            console.log('\nüß™ Test cr√©ation UserRole...');
            try {
                const newUserRole = await UserRole.create({
                    id_user: user.id_user,
                    id_role: userRole.get('id_role')
                });
                
                console.log('‚úÖ UserRole cr√©√© avec succ√®s:', {
                    id_user_role: newUserRole.id_user_role,
                    id_user: newUserRole.id_user,
                    id_role: newUserRole.id_role
                });
            } catch (createError) {
                console.log('‚ùå Erreur cr√©ation UserRole:', createError.message);
                if (createError.sql) {
                    console.log('SQL:', createError.sql);
                }
            }
        }
        
    } catch (error) {
        console.error('‚ùå Erreur:', error);
    } finally {
        await sequelize.close();
    }
}

testUserRoleCreation();
