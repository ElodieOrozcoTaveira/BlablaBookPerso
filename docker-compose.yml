version: '3.9'

services:
  frontend:
    build:
      context: ./frontend
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV}
      - API_URL=${API_URL}
    volumes:
      - ./frontend:/src
      - frontend_node_modules:/src/node_modules
    working_dir: /src
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    depends_on:
      - backend

  backend:
    build:
      context: ./backend
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/src
      - backend_node_modules:/src/node_modules
    working_dir: /src
    environment:
      - NODE_ENV=${NODE_ENV}
      - DB_HOST=${DB_HOST}
      - DB_PORT=${DB_PORT}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
    command: ["npm", "run", "dev"]
    depends_on:
      - postgres

  postgres:
    image: postgres:17-alpine
    container_name: postgres_container
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data

  redis:
    image: redis:alpine
    container_name: redis_container
    ports:
      - "6379:6379"

  adminer:
    image: adminer
    container_name: adminer_container
    restart: always
    ports:
      - "8080:8080"

  nginx:
    image: nginx:alpine
    container_name: nginx_container
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - frontend
      - backend

volumes:
  db_data:
  frontend_node_modules:
  backend_node_modules: